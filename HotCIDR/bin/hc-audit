#!/usr/bin/env python2
from hotcidr.audit import main
from hotcidr.gitlib import GIT_REPO_DIR
import argparse

parser = argparse.ArgumentParser(description='Create audit output')

#Positional arguments
parser.add_argument('repo', help='Input git directory, or git clone URL. If a clone url is specified, the directory will be cloned to ' + GIT_REPO_DIR + '/<git repo name>, and read from there.')

#Optional arguments
parser.add_argument('--from-time', help='Include events from this timestamp until the specified to-date')
parser.add_argument('--to-time', help='Include events up until this timestamp starting from the specified from-date')
parser.add_argument('--output', help='Output audit at the absolute path. E.G. /home/user/output.txt.')
parser.add_argument('--output-webserver', help='Format output for the webserver, in CSV format', action='store_true')
parser.add_argument('--group', help='Audit only the specified group')
parser.add_argument('--sort-chronologically', help='Sort the audit output chronologically, rather than by action', action='store_true')
parser.add_argument('--keep-repo', help='Do not remove temporary repo after audit script finishes', action='store_true')
parser.add_argument('--silence', help='Silence progress and processing strings', action='store_true')

args = vars(parser.parse_args())

main(
    args['repo'],
    args['from_time'],
    args['to_time'],
    args['output'],
    args['output_webserver'],
    args['group'],
    args['sort_chronologically'],
    args['keep_repo'],
    args['silence']
)
